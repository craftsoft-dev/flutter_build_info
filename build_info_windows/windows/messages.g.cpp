// Copyright 2024 Craftsoft LLC. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace build_info_windows {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// BuildInfoDataPigeon

BuildInfoDataPigeon::BuildInfoDataPigeon() {}

BuildInfoDataPigeon::BuildInfoDataPigeon(
  const int64_t* build_date,
  const int64_t* install_date)
 : build_date_(build_date ? std::optional<int64_t>(*build_date) : std::nullopt),
    install_date_(install_date ? std::optional<int64_t>(*install_date) : std::nullopt) {}

const int64_t* BuildInfoDataPigeon::build_date() const {
  return build_date_ ? &(*build_date_) : nullptr;
}

void BuildInfoDataPigeon::set_build_date(const int64_t* value_arg) {
  build_date_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void BuildInfoDataPigeon::set_build_date(int64_t value_arg) {
  build_date_ = value_arg;
}


const int64_t* BuildInfoDataPigeon::install_date() const {
  return install_date_ ? &(*install_date_) : nullptr;
}

void BuildInfoDataPigeon::set_install_date(const int64_t* value_arg) {
  install_date_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void BuildInfoDataPigeon::set_install_date(int64_t value_arg) {
  install_date_ = value_arg;
}


EncodableList BuildInfoDataPigeon::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(build_date_ ? EncodableValue(*build_date_) : EncodableValue());
  list.push_back(install_date_ ? EncodableValue(*install_date_) : EncodableValue());
  return list;
}

BuildInfoDataPigeon BuildInfoDataPigeon::FromEncodableList(const EncodableList& list) {
  BuildInfoDataPigeon decoded;
  auto& encodable_build_date = list[0];
  if (!encodable_build_date.IsNull()) {
    decoded.set_build_date(std::get<int64_t>(encodable_build_date));
  }
  auto& encodable_install_date = list[1];
  if (!encodable_install_date.IsNull()) {
    decoded.set_install_date(std::get<int64_t>(encodable_install_date));
  }
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        return CustomEncodableValue(BuildInfoDataPigeon::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BuildInfoDataPigeon)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<BuildInfoDataPigeon>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by BuildInfoHostApi.
const flutter::StandardMessageCodec& BuildInfoHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `BuildInfoHostApi` to handle messages through the `binary_messenger`.
void BuildInfoHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BuildInfoHostApi* api) {
  BuildInfoHostApi::SetUp(binary_messenger, api, "");
}

void BuildInfoHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BuildInfoHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.build_info_windows.BuildInfoHostApi.fromPlatform" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<BuildInfoDataPigeon> output = api->FromPlatform();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue BuildInfoHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue BuildInfoHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace build_info_windows
